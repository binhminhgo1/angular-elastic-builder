!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),
e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),
e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),
e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),
e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),
e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),
e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),
e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),
e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular),!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var a=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(n){n&&(t.filters=e.toFilters(a.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(n){n&&(a.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,a){})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return t[a].type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){var t=["equals","notEquals","gt","gte","lt","lte"];return~t.indexOf(e.rule.subType)},e.numberNeeded=function(){var t=["last","next"];return~t.indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var a=e.map(n.bind(e,t));return a}function a(e,t,a){var n=e.map(l.bind(e,t,a)).filter(function(e){return!!e});return n}function n(e,t,a){a!==!1&&(a=!0);var l=Object.keys(t)[0],s=i(l);switch(l){case"or":case"and":s.rules=t[l].map(n.bind(t,e)),s.subType=l;break;case"missing":case"exists":s.field=t[l].field,s.subType={exists:"exists",missing:"notExists"}[l],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"multi":var u=t[l][s.field];"string"==typeof u&&(u=[u]),s.values=r.choices.reduce(function(e,a){return e[a]=t[l][s.field].indexOf(a)!==-1,e},{});break;case"date":s.subType=a?"equals":"notEquals",s.date=new Date(t[l][s.field]);break;case"term":case"number":s.subType=a?"equals":"notEquals",s.value=t[l][s.field];break;case"boolean":case"select":s.value=t[l][s.field];break;default:throw new Error("unexpected type "+r.type)}break;case"range":s.field=Object.keys(t[l])[0];var r=e[s.field];switch(r.type){case"date":var o;if(s.field=Object.keys(t[l])[0],2===Object.keys(t[l][s.field]).length){if(o=t[l][s.field].gte,~o.indexOf("now-")){s.subType="last",s.value=parseInt(o.split("now-")[1].split("d")[0]);break}if(~o.indexOf("now")){s.subType="next",o=t[l][s.field].lte,s.value=parseInt(o.split("now+")[1].split("d")[0]);break}}else s.subType=Object.keys(t[l][s.field])[0],s.date=t[l][s.field][s.subType];break;case"number":s.field=Object.keys(t[l])[0],s.subType=Object.keys(t[l][s.field])[0],s.value=t[l][s.field][s.subType]}break;case"match":s.field=Object.keys(t[l])[0],"string"==typeof t[l][s.field]?(s.subType="matchAny",s.value=t[l][s.field]):"operator"in t[l][s.field]?(s.subType="and"===t[l][s.field].operator?"matchAll":"matchAny",s.value=t[l][s.field].query):"type"in t[l][s.field]&&"phrase"===t[l][s.field].type&&(s.subType="matchPhrase",s.value=t[l][s.field].query);break;case"match_phrase":s.field=Object.keys(t[l])[0],s.subType="matchPhrase",s.value=t[l][s.field];break;case"not":s=n(e,t[l].filter,!1);break;default:s.field=Object.keys(t[l])[0]}return s}function l(t,a,n){var i={};if("group"===n.type)return i[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),i;var r=n.field,u=t[r];if(r){switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"notEquals":if(void 0===n.value)return;i.not={filter:{term:{}}},i.not.filter.term[r]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;i.range={},i.range[r]={},i.range[r][n.subType]=n.value;break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;i.term={},i.term[r]=s(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;i.not={filter:{term:{}}},i.not.filter.term[r]=s(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;i.range={},i.range[r]={},i.range[r][n.subType]=s(a,n.date);break;case"last":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now-"+n.value+"d",i.range[r].lte="now";break;case"next":if(!e.isNumber(n.value))return;i.range={},i.range[r]={},i.range[r].gte="now",i.range[r].lte="now+"+n.value+"d";break;case"exists":i.exists={field:r};break;case"notExists":i.missing={field:r};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":i.terms={},i.terms[r]=Object.keys(n.values||{}).reduce(function(e,t){return n.values[t]&&e.push(t),e},[]);break;case"select":if(void 0===n.value)return;i.term={},i.term[r]=n.value;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;i.match={},i.match[r]=n.value;break;case"matchAll":if(void 0===n.value)return;i.match={},i.match[r]={},i.match[r].query=n.value,i.match[r].operator="and";break;case"matchPhrase":if(void 0===n.value)return;i.match_phrase={},i.match_phrase[r]=n.value;break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return i}}function i(t){var a={or:"group",and:"group"},n=a[t]||"item",l={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""}};return e.copy(l[n])}function s(t,a){if(!e.isDate(a))return!1;var n="yyyy-MM-ddTHH:mm:ssZ",l=t("date")(a,n);return l}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="elastic-filter form-inline">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="elastic-builder-chooser">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <span class="elastic-builder--select">\n        <select data-ng-model="group.subType" class="form-control">\n          <option value="and">all</option>\n          <option value="or">any</option>\n        </select>\n      </span>\n      of these conditions are met\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item elastic-filter-item-actions">\n        <div class="elastic-builder-rule">\n          <a class="btn btn-sm btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n            <i class="fa fa-plus"></i>\n          </a>\n          <a class="btn btn-sm btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n            <i class="fa fa-list"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <a class="btn btn-sm btn-default remover" data-ng-click="onRemove()">\n      <i class="fa fa-times"></i>\n    </a>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <span class="elastic-builder--select">\n    <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n  </span>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule--text">Equals</span>\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Unbounded-range">\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n      </optgroup>\n      <optgroup label="Bounded-range">\n        <option value="last">In the last</option>\n        <option value="next">In the next</option>\n      </optgroup>\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule--text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="elastic-term">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <!-- Term Options -->\n      <option value="matchAll">Match All</option>\n      <option value="matchAny">Match Any</option>\n      <option value="matchPhrase">Match Phrase</option>\n\n    </select>\n  </span>\n\n  <input\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule form-control rule--text">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <span class="elastic-builder--select">\n    <select data-ng-model="rule.subType" class="form-control">\n      <optgroup label="Exact">\n        <option value="equals">Equals</option>\n        <option value="notEquals">Not Equals</option>\n      </optgroup>\n      <optgroup label="Range">\n        <option value="gt">&gt;</option>\n        <option value="gte">&ge;</option>\n        <option value="lt">&lt;</option>\n        <option value="lte">&le;</option>\n      </optgroup>\n\n      <optgroup label="Generic">\n        <option value="exists">Exists</option>\n        <option value="notExists">Not Exists</option>\n      </optgroup>\n    </select>\n  </span>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule--text">Equals</span>\n\n  <span class="elastic-builder--select">\n    <select\n      data-ng-model="rule.value"\n      class="form-control"\n      data-ng-options="choice for choice in guide.choices">\n    </select>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="elastic-builder--select elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n</span>\n\n<input\n  data-ng-if="inputNeeded()"\n  class="form-control"\n  data-ng-model="rule.value"\n  type="text">\n')}])}(window.angular);